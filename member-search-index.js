memberSearchIndex = [{"p":"stack","c":"Stack","l":"_print(StackNode<T>)","u":"_print(stack.StackNode)"},{"p":"linkedlist","c":"CircularLinkedList","l":"add(T)"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"add(T)"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"add(T)"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"add(T, int)","u":"add(T,int)"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"add(T, int)","u":"add(T,int)"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"addFirst(T)"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"addFirst(T)"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"addLast(T)"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"addUsingRec(T, int)","u":"addUsingRec(T,int)"},{"p":"Trie","c":"TrieNode","l":"addWord(String)","u":"addWord(java.lang.String)"},{"p":"recursion","c":"LinkedListUsingRecursion","l":"append(String)","u":"append(java.lang.String)"},{"p":"queue","c":"Queue","l":"back"},{"p":"tree.bfs","c":"Bfs","l":"Bfs()","u":"%3Cinit%3E()"},{"p":"graph","c":"GraphTraversal","l":"bfs(Map<String, List<String>>, String)","u":"bfs(java.util.Map,java.lang.String)"},{"p":"tree.bfs","c":"Bfs","l":"bfs(Node<T>)","u":"bfs(tree.bfs.Node)"},{"p":"tree.bfs","c":"Bfs","l":"bfs(Queue<Node<T>>)","u":"bfs(java.util.Queue)"},{"p":"tree.bfs","c":"Bfs","l":"bfsLevelWise(Node<T>, List<List<T>>)","u":"bfsLevelWise(tree.bfs.Node,java.util.List)"},{"p":"tree.bfs","c":"Bfs","l":"bfsReturningList(Node<T>)","u":"bfsReturningList(tree.bfs.Node)"},{"p":"tree.dfs","c":"Dfs","l":"bfsReturningList(Node<T>)","u":"bfsReturningList(tree.dfs.Node)"},{"p":"tree.bfs","c":"BfsSearch","l":"BfsSearch()","u":"%3Cinit%3E()"},{"p":"tree.bfs","c":"BfsSum","l":"BfsSum()","u":"%3Cinit%3E()"},{"p":"graph","c":"GraphTraversal","l":"bfsUsingRecursion(Map<String, List<String>>, Queue<String>)","u":"bfsUsingRecursion(java.util.Map,java.util.Queue)"},{"p":"binarysearch","c":"BinarySearchSolution","l":"BinarySearchSolution()","u":"%3Cinit%3E()"},{"p":"TickTockToe","c":"Board","l":"Board()","u":"%3Cinit%3E()"},{"p":"tree","c":"BoundaryTraversal","l":"BoundaryTraversal()","u":"%3Cinit%3E()"},{"p":"tree","c":"BoundaryTraversal","l":"boundaryTraversalAntiClockWise(Node<String>)","u":"boundaryTraversalAntiClockWise(tree.Node)"},{"p":"tree","c":"BoundaryTraversal","l":"boundaryTraversalClockWise(Node<String>)","u":"boundaryTraversalClockWise(tree.Node)"},{"p":"recursion","c":"BracketMaching","l":"BracketMaching()","u":"%3Cinit%3E()"},{"p":"dpp","c":"CanFindTargetSum","l":"CanFindTargetSum()","u":"%3Cinit%3E()"},{"p":"dpp","c":"CanFindTargetSumTests","l":"CanFindTargetSumTests()","u":"%3Cinit%3E()"},{"p":"dpp","c":"CanFindTargetSum","l":"canSum(int[], int)","u":"canSum(int[],int)"},{"p":"dpp","c":"CanFindTargetSum","l":"canSumOptimized(int[], int, HashMap<Integer, Boolean>)","u":"canSumOptimized(int[],int,java.util.HashMap)"},{"p":"binarysearch","c":"CapacityToShipPackageWith_K_Days","l":"CapacityToShipPackageWith_K_Days()","u":"%3Cinit%3E()"},{"p":"tree","c":"CheckBalancedBinaryTree","l":"CheckBalancedBinaryTree()","u":"%3Cinit%3E()"},{"p":"tree","c":"CheckBalancedBinaryTree","l":"checkBalancedBinaryTree(Node<String>)","u":"checkBalancedBinaryTree(tree.Node)"},{"p":"tree","c":"CheckSimilarTrees","l":"checkForSimilarTrees(Node<String>, Node<String>)","u":"checkForSimilarTrees(tree.Node,tree.Node)"},{"p":"tree","c":"CheckSimilarTrees","l":"CheckSimilarTrees()","u":"%3Cinit%3E()"},{"p":"linkedlist","c":"CircularLinkedList","l":"CircularLinkedList()","u":"%3Cinit%3E()"},{"p":"recursion","c":"Combination","l":"Combination()","u":"%3Cinit%3E()"},{"p":"tree.binaryTree.completebinarytree","c":"CompleteBinaryTree","l":"CompleteBinaryTree()","u":"%3Cinit%3E()"},{"p":"tree.binaryTree.completebinarytree","c":"CompleteBinaryTree","l":"CompleteBinaryTree(int)","u":"%3Cinit%3E(int)"},{"p":"recursion","c":"LinkedListUsingRecursion","l":"contains(String)","u":"contains(java.lang.String)"},{"p":"haffmanCoding","c":"HuffmanCode","l":"convertTextToCode(HuffmanNode, String, Map<Character, Byte[]>)","u":"convertTextToCode(haffmanCoding.HuffmanNode,java.lang.String,java.util.Map)"},{"p":"Trie","c":"CountDistinctSubstrings","l":"CountDistinctSubstrings()","u":"%3Cinit%3E()"},{"p":"graph","c":"CountNoOfEdges","l":"CountNoOfEdges()","u":"%3Cinit%3E()"},{"p":"tree.binaryTree.completebinarytree","c":"CompleteBinaryTree","l":"countNumNodes(CompleteBinaryTree)","u":"countNumNodes(tree.binaryTree.completebinarytree.CompleteBinaryTree)"},{"p":"haffmanCoding","c":"HuffmanCode","l":"decodeString(List<Byte>)","u":"decodeString(java.util.List)"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"delete(int)"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"delete(int)"},{"p":"recursion","c":"LinkedListUsingRecursion","l":"delete(String)","u":"delete(java.lang.String)"},{"p":"linkedlist","c":"CircularLinkedList","l":"delete(T)"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"deleteFist()"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"deleteFist()"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"deleteLast()"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"deleteLast()"},{"p":"queue","c":"Queue","l":"dequeue()"},{"p":"tree.dfs","c":"Dfs","l":"Dfs()","u":"%3Cinit%3E()"},{"p":"graph","c":"GraphTraversal","l":"dfs(Map<String, List<String>>, String)","u":"dfs(java.util.Map,java.lang.String)"},{"p":"tree.dfs","c":"Dfs","l":"dfs(Node<T>)","u":"dfs(tree.dfs.Node)"},{"p":"tree.dfs","c":"DfsOrder","l":"dfsInOrder(Nodee<T>)","u":"dfsInOrder(tree.dfs.Nodee)"},{"p":"tree.dfs","c":"DfsOrder","l":"dfsInOrderIteration(Nodee<T>)","u":"dfsInOrderIteration(tree.dfs.Nodee)"},{"p":"tree.dfs","c":"DfsOrder","l":"DfsOrder()","u":"%3Cinit%3E()"},{"p":"tree.dfs","c":"DfsOrder","l":"dfsPostOrder(Nodee<T>)","u":"dfsPostOrder(tree.dfs.Nodee)"},{"p":"tree.dfs","c":"DfsOrder","l":"dfsPostOrderIteration(Nodee<T>)","u":"dfsPostOrderIteration(tree.dfs.Nodee)"},{"p":"tree.dfs","c":"DfsOrder","l":"dfsPreOrder(Nodee<T>)","u":"dfsPreOrder(tree.dfs.Nodee)"},{"p":"tree.dfs","c":"DfsOrder","l":"dfsPreorderIteration(Nodee<T>)","u":"dfsPreorderIteration(tree.dfs.Nodee)"},{"p":"tree.dfs","c":"Dfs","l":"dfsRecursionWithoutStack(Node<T>)","u":"dfsRecursionWithoutStack(tree.dfs.Node)"},{"p":"tree.dfs","c":"Dfs","l":"dfsRecursionWithStack(Stack<Node<T>>)","u":"dfsRecursionWithStack(java.util.Stack)"},{"p":"tree.dfs","c":"DfsSum","l":"DfsSum()","u":"%3Cinit%3E()"},{"p":"tree.dfs","c":"DfsSum","l":"dfsSum(Nodes<Integer>)","u":"dfsSum(tree.dfs.Nodes)"},{"p":"tree.dfs","c":"DfsSum","l":"dfsSumRecursionWithStack(Stack<Nodes<Integer>>, int)","u":"dfsSumRecursionWithStack(java.util.Stack,int)"},{"p":"tree.dfs","c":"DfsSum","l":"dfsSumRecursiveWithoutStack(Nodes<Integer>)","u":"dfsSumRecursiveWithoutStack(tree.dfs.Nodes)"},{"p":"graph","c":"GraphTraversal","l":"dfsUsingRecursion(Map<String, List<String>>, String)","u":"dfsUsingRecursion(java.util.Map,java.lang.String)"},{"p":"tree","c":"DiameterOfTheTree","l":"DiameterOfTheTree()","u":"%3Cinit%3E()"},{"p":"tree","c":"DiameterOfTheTree","l":"diameterOfTheTree(Node<String>)","u":"diameterOfTheTree(tree.Node)"},{"p":"linkedlist","c":"CircularLinkedList","l":"display()"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"display()"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"display()"},{"p":"tree.binaryTree.completebinarytree","c":"CompleteBinaryTree","l":"display(CompleteBinaryTree)","u":"display(tree.binaryTree.completebinarytree.CompleteBinaryTree)"},{"p":"tree.binaryTree.fullbinarytree","c":"FullBinaryTree","l":"display(FullBinaryTree)","u":"display(tree.binaryTree.fullbinarytree.FullBinaryTree)"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"display(Node<T>)","u":"display(linkedlist.Node)"},{"p":"tree.binaryTree.perfectbinarytree","c":"PerfectBinaryTree","l":"display(PerfectBinaryTree)","u":"display(tree.binaryTree.perfectbinarytree.PerfectBinaryTree)"},{"p":"tree.normalTree","c":"Tree","l":"display(Tree)","u":"display(tree.normalTree.Tree)"},{"p":"Trie","c":"TrieNode","l":"displayAll()"},{"p":"Trie","c":"TrieNode","l":"displayAllWords(TrieNode, StringBuffer, List<String>)","u":"displayAllWords(Trie.TrieNode,java.lang.StringBuffer,java.util.List)"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"DoublyLinkedList()","u":"%3Cinit%3E()"},{"p":"queue","c":"Queue","l":"enqueue(T)"},{"p":"dpp","c":"Factorial","l":"Factorial()","u":"%3Cinit%3E()"},{"p":"dpp","c":"Fibbonacci","l":"Fibbonacci()","u":"%3Cinit%3E()"},{"p":"dpp","c":"Fibbonacci","l":"fibboUsingDppHashmap(int, HashMap<Integer, Long>)","u":"fibboUsingDppHashmap(int,java.util.HashMap)"},{"p":"dpp","c":"Fibbonacci","l":"fibboUsingDppMemoization(int, int[])","u":"fibboUsingDppMemoization(int,int[])"},{"p":"dpp","c":"Fibbonacci","l":"fibboUsingDppTabularization(int)"},{"p":"dpp","c":"Fibbonacci","l":"fibboUsingRecursion(int)"},{"p":"recursion","c":"Fibonacci","l":"Fibonacci()","u":"%3Cinit%3E()"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"find(T)"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"find(T)"},{"p":"binarysearch","c":"FindFirstAndLastOccurrenceOfElementInSortedArray","l":"FindFirstAndLastOccurrenceOfElementInSortedArray()","u":"%3Cinit%3E()"},{"p":"binarysearch","c":"FindFirstBadVersionOfApi","l":"FindFirstBadVersionOfApi()","u":"%3Cinit%3E()"},{"p":"graph","c":"HasPathInDirectedGraph","l":"findPathUsingBfsRecursion(Map<String, List<String>>, String, String)","u":"findPathUsingBfsRecursion(java.util.Map,java.lang.String,java.lang.String)"},{"p":"graph","c":"HasPathInUnDirectedGraph","l":"findPathUsingBfsRecursion(Map<String, List<String>>, String, String)","u":"findPathUsingBfsRecursion(java.util.Map,java.lang.String,java.lang.String)"},{"p":"graph","c":"HasPathInDirectedGraph","l":"findPathUsingDfsRecursion(Map<String, List<String>>, String, String)","u":"findPathUsingDfsRecursion(java.util.Map,java.lang.String,java.lang.String)"},{"p":"graph","c":"HasPathInUnDirectedGraph","l":"findPathUsingDfsRecursion(Map<String, List<String>>, String, String, Set<String>)","u":"findPathUsingDfsRecursion(java.util.Map,java.lang.String,java.lang.String,java.util.Set)"},{"p":"dpp","c":"FindTargetSum","l":"FindTargetSum()","u":"%3Cinit%3E()"},{"p":"Trie","c":"FindUniqueRowsInMatrix","l":"FindUniqueRowsInMatrix()","u":"%3Cinit%3E()"},{"p":"Trie","c":"TrieNode","l":"findWordWithPrefix(String, boolean)","u":"findWordWithPrefix(java.lang.String,boolean)"},{"p":"queue","c":"Queue","l":"front"},{"p":"tree.binaryTree.fullbinarytree","c":"FullBinaryTree","l":"FullBinaryTree()","u":"%3Cinit%3E()"},{"p":"tree.binaryTree.fullbinarytree","c":"FullBinaryTree","l":"FullBinaryTree(int)","u":"%3Cinit%3E(int)"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"get(int)"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"get(int)"},{"p":"haffmanCoding","c":"HuffmanCode","l":"getEncodedString(String)","u":"getEncodedString(java.lang.String)"},{"p":"haffmanCoding","c":"HuffmanCode","l":"getFileString()"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"getHead()"},{"p":"graph","c":"ShortestPathInGraphComponents","l":"getShortestPath(Map<String, List<Node>>, String, String)","u":"getShortestPath(java.util.Map,java.lang.String,java.lang.String)"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"getSize()"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"getSize()"},{"p":"graph","c":"GraphTraversal","l":"GraphTraversal()","u":"%3Cinit%3E()"},{"p":"dpp","c":"GridTraveller","l":"GridTraveller()","u":"%3Cinit%3E()"},{"p":"graph","c":"HasPathInDirectedGraph","l":"HasPathInDirectedGraph()","u":"%3Cinit%3E()"},{"p":"graph","c":"HasPathInUnDirectedGraph","l":"HasPathInUnDirectedGraph()","u":"%3Cinit%3E()"},{"p":"recursion","c":"LinkedListUsingRecursion","l":"head"},{"p":"tree","c":"HeightOfTree","l":"HeightOfTree()","u":"%3Cinit%3E()"},{"p":"tree.binaryTree.perfectbinarytree","c":"PerfectBinaryTree","l":"heightOfTree(PerfectBinaryTree)","u":"heightOfTree(tree.binaryTree.perfectbinarytree.PerfectBinaryTree)"},{"p":"tree","c":"HeightOfTree","l":"heightUsingIteration(Node<String>)","u":"heightUsingIteration(tree.Node)"},{"p":"tree","c":"HeightOfTree","l":"heightUsingRecursion(Node<String>)","u":"heightUsingRecursion(tree.Node)"},{"p":"haffmanCoding","c":"HuffCodeEncodeDecodeFile","l":"HuffCodeEncodeDecodeFile()","u":"%3Cinit%3E()"},{"p":"haffmanCoding","c":"HuffmanCode","l":"HuffmanCode()","u":"%3Cinit%3E()"},{"p":"tree.binaryTree.completebinarytree","c":"CompleteBinaryTree","l":"inOrderTraversal(CompleteBinaryTree)","u":"inOrderTraversal(tree.binaryTree.completebinarytree.CompleteBinaryTree)"},{"p":"tree.binaryTree.fullbinarytree","c":"FullBinaryTree","l":"inOrderTraversal(FullBinaryTree)","u":"inOrderTraversal(tree.binaryTree.fullbinarytree.FullBinaryTree)"},{"p":"tree.binaryTree.perfectbinarytree","c":"PerfectBinaryTree","l":"inOrderTraversal(PerfectBinaryTree)","u":"inOrderTraversal(tree.binaryTree.perfectbinarytree.PerfectBinaryTree)"},{"p":"tree.normalTree","c":"Tree","l":"inOrderTraversal(Tree)","u":"inOrderTraversal(tree.normalTree.Tree)"},{"p":"tree.binaryTree.completebinarytree","c":"CompleteBinaryTree","l":"insert()"},{"p":"tree.binaryTree.fullbinarytree","c":"FullBinaryTree","l":"insert()"},{"p":"tree.binaryTree.perfectbinarytree","c":"PerfectBinaryTree","l":"insert()"},{"p":"tree.normalTree","c":"Tree","l":"insert()"},{"p":"linkedlist","c":"CircularLinkedList","l":"insertAt(int, T)","u":"insertAt(int,T)"},{"p":"binarysearch","c":"InsertionPositionInSortedArray","l":"InsertionPositionInSortedArray()","u":"%3Cinit%3E()"},{"p":"tree.binaryTree.completebinarytree","c":"CompleteBinaryTree","l":"isCompleteBinaryTree(CompleteBinaryTree, int, int)","u":"isCompleteBinaryTree(tree.binaryTree.completebinarytree.CompleteBinaryTree,int,int)"},{"p":"tree.binaryTree.fullbinarytree","c":"FullBinaryTree","l":"isFullBinaryTree(FullBinaryTree)","u":"isFullBinaryTree(tree.binaryTree.fullbinarytree.FullBinaryTree)"},{"p":"graph","c":"IslandCount","l":"IslandCount()","u":"%3Cinit%3E()"},{"p":"tree.binaryTree.perfectbinarytree","c":"PerfectBinaryTree","l":"isPerfectBinaryTree(PerfectBinaryTree, int, int)","u":"isPerfectBinaryTree(tree.binaryTree.perfectbinarytree.PerfectBinaryTree,int,int)"},{"p":"Trie","c":"TrieNode","l":"isTerminatingNode()"},{"p":"binarysearch","c":"KokoEatingBananas","l":"KokoEatingBananas()","u":"%3Cinit%3E()"},{"p":"graph","c":"LargestComponentInGraph","l":"LargestComponentInGraph()","u":"%3Cinit%3E()"},{"p":"backtracking","c":"LetterCasePermutation","l":"LetterCasePermutation()","u":"%3Cinit%3E()"},{"p":"recursion","c":"LinkedListUsingRecursion","l":"LinkedListUsingRecursion()","u":"%3Cinit%3E()"},{"p":"binarysearch","c":"LongestRepeatingSubstring","l":"LongestRepeatingSubstring()","u":"%3Cinit%3E()"},{"p":"recursion","c":"LongestWordInString","l":"LongestWordInString()","u":"%3Cinit%3E()"},{"p":"backtracking","c":"LetterCasePermutation","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"backtracking","c":"NQueue","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"backtracking","c":"NQueue2","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"backtracking","c":"PowerSet","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"backtracking","c":"PowerSetWithBooleanArray","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"backtracking","c":"WordSearch","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"binarysearch","c":"BinarySearchSolution","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"binarysearch","c":"CapacityToShipPackageWith_K_Days","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"binarysearch","c":"FindFirstAndLastOccurrenceOfElementInSortedArray","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"binarysearch","c":"FindFirstBadVersionOfApi","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"binarysearch","c":"InsertionPositionInSortedArray","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"binarysearch","c":"KokoEatingBananas","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"binarysearch","c":"LongestRepeatingSubstring","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"binarysearch","c":"MinimumInRotatedSortedArray","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"binarysearch","c":"MinimumInRotatedSortedArrayWithDuplicates","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"binarysearch","c":"SearchInRotatedSortedArray","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"binarysearch","c":"SquarerootOfPositiveInteger","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"dpp","c":"CanFindTargetSum","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"dpp","c":"Factorial","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"dpp","c":"Fibbonacci","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"dpp","c":"FindTargetSum","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"dpp","c":"GridTraveller","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"dpp","c":"UglyNumbers","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"graph","c":"CountNoOfEdges","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"graph","c":"GraphTraversal","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"graph","c":"HasPathInDirectedGraph","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"graph","c":"HasPathInUnDirectedGraph","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"graph","c":"IslandCount","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"graph","c":"LargestComponentInGraph","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"graph","c":"MinimumIsland","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"graph","c":"NoOfConnectedComponents","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"graph","c":"ShortestPathInGraphComponents","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"haffmanCoding","c":"HuffCodeEncodeDecodeFile","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"haffmanCoding","c":"HuffmanCode","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"linkedlist","c":"CircularLinkedList","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"linkedlist","c":"MergeSortedList","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"linkedlist","c":"RemoveDuplicates","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"queue","c":"Queue","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"recursion","c":"BracketMaching","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"recursion","c":"Combination","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"recursion","c":"Fibonacci","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"recursion","c":"LinkedListUsingRecursion","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"recursion","c":"LongestWordInString","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"recursion","c":"Permutation","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"recursion","c":"ReverseLinkedList","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"recursion","c":"StringReverse","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"recursion","c":"SumOfNumbers","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"stack","c":"Stack","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"string","c":"MaxRepeatedCharsInString","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"TickTockToe","c":"TicTokToeMiniMax","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"TickTockToe","c":"TicTokToeMiniMaxV2","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"TickTockToe","c":"TicTokToeMiniMaxWithAlphaBetaPruning","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree.bfs","c":"Bfs","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree.bfs","c":"BfsSearch","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree.bfs","c":"BfsSum","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree","c":"BoundaryTraversal","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree","c":"CheckBalancedBinaryTree","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree","c":"CheckSimilarTrees","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree.dfs","c":"Dfs","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree.dfs","c":"DfsOrder","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree.dfs","c":"DfsSum","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree","c":"DiameterOfTheTree","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree","c":"HeightOfTree","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree","c":"MaxPathSumInTree","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree","c":"ZigZagOrSpiralTraversal","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"Trie","c":"CountDistinctSubstrings","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"Trie","c":"FindUniqueRowsInMatrix","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"Trie.gg","c":"Suffix","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"Trie","c":"TrieNode","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"tree","c":"MaxPathSumInTree","l":"maxHeightSumInTree(Node<Integer>)","u":"maxHeightSumInTree(tree.Node)"},{"p":"tree","c":"MaxPathSumInTree","l":"MaxPathSumInTree()","u":"%3Cinit%3E()"},{"p":"string","c":"MaxRepeatedCharsInString","l":"MaxRepeatedCharsInString()","u":"%3Cinit%3E()"},{"p":"linkedlist","c":"MergeSortedList","l":"MergeSortedList()","u":"%3Cinit%3E()"},{"p":"linkedlist","c":"MergeSortedList","l":"mergeUsingNodes(Node<Integer>, Node<Integer>)","u":"mergeUsingNodes(linkedlist.Node,linkedlist.Node)"},{"p":"linkedlist","c":"MergeSortedList","l":"mergeUsingThirdList(Node<Integer>, Node<Integer>)","u":"mergeUsingThirdList(linkedlist.Node,linkedlist.Node)"},{"p":"binarysearch","c":"MinimumInRotatedSortedArray","l":"MinimumInRotatedSortedArray()","u":"%3Cinit%3E()"},{"p":"binarysearch","c":"MinimumInRotatedSortedArrayWithDuplicates","l":"MinimumInRotatedSortedArrayWithDuplicates()","u":"%3Cinit%3E()"},{"p":"graph","c":"MinimumIsland","l":"MinimumIsland()","u":"%3Cinit%3E()"},{"p":"linkedlist","c":"Node","l":"next"},{"p":"linkedlist","c":"Node","l":"Node()","u":"%3Cinit%3E()"},{"p":"linkedlist","c":"Node","l":"Node(T)","u":"%3Cinit%3E(T)"},{"p":"tree","c":"Node","l":"Node(T)","u":"%3Cinit%3E(T)"},{"p":"linkedlist","c":"Node","l":"Node(T, Node<T>)","u":"%3Cinit%3E(T,linkedlist.Node)"},{"p":"graph","c":"NoOfConnectedComponents","l":"NoOfConnectedComponents()","u":"%3Cinit%3E()"},{"p":"backtracking","c":"NQueue","l":"NQueue()","u":"%3Cinit%3E()"},{"p":"backtracking","c":"NQueue2","l":"NQueue2()","u":"%3Cinit%3E()"},{"p":"linkedlist.doubly","c":"DoublyLinkedList","l":"peek()"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"peek()"},{"p":"tree.binaryTree.perfectbinarytree","c":"PerfectBinaryTree","l":"PerfectBinaryTree()","u":"%3Cinit%3E()"},{"p":"tree.binaryTree.perfectbinarytree","c":"PerfectBinaryTree","l":"PerfectBinaryTree(int)","u":"%3Cinit%3E(int)"},{"p":"recursion","c":"Permutation","l":"Permutation()","u":"%3Cinit%3E()"},{"p":"stack","c":"Stack","l":"pop()"},{"p":"tree.binaryTree.completebinarytree","c":"CompleteBinaryTree","l":"postOrderTraversal(CompleteBinaryTree)","u":"postOrderTraversal(tree.binaryTree.completebinarytree.CompleteBinaryTree)"},{"p":"tree.binaryTree.fullbinarytree","c":"FullBinaryTree","l":"postOrderTraversal(FullBinaryTree)","u":"postOrderTraversal(tree.binaryTree.fullbinarytree.FullBinaryTree)"},{"p":"tree.binaryTree.perfectbinarytree","c":"PerfectBinaryTree","l":"postOrderTraversal(PerfectBinaryTree)","u":"postOrderTraversal(tree.binaryTree.perfectbinarytree.PerfectBinaryTree)"},{"p":"tree.normalTree","c":"Tree","l":"postOrderTraversal(Tree)","u":"postOrderTraversal(tree.normalTree.Tree)"},{"p":"backtracking","c":"PowerSet","l":"PowerSet()","u":"%3Cinit%3E()"},{"p":"backtracking","c":"PowerSetWithBooleanArray","l":"PowerSetWithBooleanArray()","u":"%3Cinit%3E()"},{"p":"tree.binaryTree.completebinarytree","c":"CompleteBinaryTree","l":"preOrderTraversal(CompleteBinaryTree)","u":"preOrderTraversal(tree.binaryTree.completebinarytree.CompleteBinaryTree)"},{"p":"tree.binaryTree.fullbinarytree","c":"FullBinaryTree","l":"preOrderTraversal(FullBinaryTree)","u":"preOrderTraversal(tree.binaryTree.fullbinarytree.FullBinaryTree)"},{"p":"tree.binaryTree.perfectbinarytree","c":"PerfectBinaryTree","l":"preOrderTraversal(PerfectBinaryTree)","u":"preOrderTraversal(tree.binaryTree.perfectbinarytree.PerfectBinaryTree)"},{"p":"tree.normalTree","c":"Tree","l":"preOrderTraversal(Tree)","u":"preOrderTraversal(tree.normalTree.Tree)"},{"p":"queue","c":"Queue","l":"print()"},{"p":"recursion","c":"LinkedListUsingRecursion","l":"print()"},{"p":"stack","c":"Stack","l":"print()"},{"p":"stack","c":"Stack","l":"push(T)"},{"p":"queue","c":"Queue","l":"Queue()","u":"%3Cinit%3E()"},{"p":"linkedlist","c":"RemoveDuplicates","l":"RemoveDuplicates()","u":"%3Cinit%3E()"},{"p":"linkedlist","c":"RemoveDuplicates","l":"removeDuplicatesInSortedList(Node<Integer>)","u":"removeDuplicatesInSortedList(linkedlist.Node)"},{"p":"linkedlist","c":"RemoveDuplicates","l":"removeDuplicatesInUnSortedList(Node<Integer>)","u":"removeDuplicatesInUnSortedList(linkedlist.Node)"},{"p":"recursion","c":"ReverseLinkedList","l":"ReverseLinkedList()","u":"%3Cinit%3E()"},{"p":"recursion","c":"ReverseLinkedList","l":"reverseListIterative(Node)","u":"reverseListIterative(recursion.Node)"},{"p":"recursion","c":"ReverseLinkedList","l":"reverseListRecursive(Node)","u":"reverseListRecursive(recursion.Node)"},{"p":"tree.bfs","c":"BfsSearch","l":"search(Nodee<String>, String)","u":"search(tree.bfs.Nodee,java.lang.String)"},{"p":"tree.bfs","c":"BfsSearch","l":"search(Queue<Nodee<String>>, String)","u":"search(java.util.Queue,java.lang.String)"},{"p":"stack","c":"Stack","l":"search(T)"},{"p":"binarysearch","c":"SearchInRotatedSortedArray","l":"SearchInRotatedSortedArray()","u":"%3Cinit%3E()"},{"p":"haffmanCoding","c":"HuffmanCode","l":"setFileString(String)","u":"setFileString(java.lang.String)"},{"p":"Trie","c":"TrieNode","l":"setParent(TrieNode)","u":"setParent(Trie.TrieNode)"},{"p":"graph","c":"ShortestPathInGraphComponents","l":"ShortestPathInGraphComponents()","u":"%3Cinit%3E()"},{"p":"linkedlist.singly","c":"SinglyLinkedList","l":"SinglyLinkedList()","u":"%3Cinit%3E()"},{"p":"queue","c":"Queue","l":"size"},{"p":"stack","c":"Stack","l":"size"},{"p":"backtracking","c":"NQueue","l":"solveNQueue(int)"},{"p":"backtracking","c":"NQueue2","l":"solveNQueue(int)"},{"p":"backtracking","c":"NQueue","l":"solveNQueueHelper(int)"},{"p":"binarysearch","c":"SquarerootOfPositiveInteger","l":"SquarerootOfPositiveInteger()","u":"%3Cinit%3E()"},{"p":"stack","c":"Stack","l":"Stack()","u":"%3Cinit%3E()"},{"p":"recursion","c":"StringReverse","l":"StringReverse()","u":"%3Cinit%3E()"},{"p":"Trie.gg","c":"Suffix","l":"Suffix()","u":"%3Cinit%3E()"},{"p":"recursion","c":"LinkedListUsingRecursion","l":"sum()"},{"p":"tree.bfs","c":"BfsSum","l":"sum(Nodes<Integer>)","u":"sum(tree.bfs.Nodes)"},{"p":"tree.bfs","c":"BfsSum","l":"sum(Queue<Nodes<Integer>>, int)","u":"sum(java.util.Queue,int)"},{"p":"recursion","c":"SumOfNumbers","l":"SumOfNumbers()","u":"%3Cinit%3E()"},{"p":"dpp","c":"CanFindTargetSumTests","l":"testCanSum(int)"},{"p":"TickTockToe","c":"TicTokToeMiniMax","l":"TicTokToeMiniMax()","u":"%3Cinit%3E()"},{"p":"TickTockToe","c":"TicTokToeMiniMaxV2","l":"TicTokToeMiniMaxV2()","u":"%3Cinit%3E()"},{"p":"TickTockToe","c":"TicTokToeMiniMaxWithAlphaBetaPruning","l":"TicTokToeMiniMaxWithAlphaBetaPruning()","u":"%3Cinit%3E()"},{"p":"stack","c":"Stack","l":"top"},{"p":"tree.normalTree","c":"Tree","l":"Tree()","u":"%3Cinit%3E()"},{"p":"tree.normalTree","c":"Tree","l":"Tree(int)","u":"%3Cinit%3E(int)"},{"p":"Trie","c":"TrieNode","l":"TrieNode()","u":"%3Cinit%3E()"},{"p":"Trie","c":"TrieNode","l":"TrieNode(Character)","u":"%3Cinit%3E(java.lang.Character)"},{"p":"dpp","c":"UglyNumbers","l":"UglyNumbers()","u":"%3Cinit%3E()"},{"p":"linkedlist","c":"Node","l":"value"},{"p":"tree","c":"Node","l":"value"},{"p":"backtracking","c":"WordSearch","l":"WordSearch()","u":"%3Cinit%3E()"},{"p":"tree","c":"ZigZagOrSpiralTraversal","l":"ZigZagOrSpiralTraversal()","u":"%3Cinit%3E()"},{"p":"tree","c":"ZigZagOrSpiralTraversal","l":"zigZagTraversal(Node<String>)","u":"zigZagTraversal(tree.Node)"}];updateSearchResults();